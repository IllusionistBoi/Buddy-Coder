<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
  </head>
  <style>
   * {
     font-family: Roboto,RobotoDraft,Helvetica,Arial,sans-serif;
   }
   body,html {
     margin: 0;
     background-color: #95a5a6;
   }
   .weather {
     opacity: 0;
     transition: opacity .5s ease-in;
   }
   .weather--loaded {
     opacity: 1;
   }
   .weather__city {
     margin: 0;
     text-align: center;
     font-size: 1.6rem; 
   }
   .weather-temp {
     display: grid;
     text-align: center;
     background-color: #ecf0f1;
     padding: 0 0 1rem;
   }
   .weather-temp__main {
     font-size: 5rem;
     grid-column: 1 / 3;
     grid-row: 1;
     color: #2980b9;
   }
   .weather-temp__min {
     grid-column: 1;
     grid-row: 2;
   }
   .weather-temp__max {
     grid-column: 2;
     grid-row: 2;
   }
   .weather__sunrise {
     padding: .5rem;
     background-color: rgba(255, 200, 0, .3);
   }
   
   .weather__sunset {
     padding: .5rem;
     background-color: rgba(95, 45, 10, 0.3);
   }
   .weather__description {
     color: #fff;
     padding: .5rem;
     font-size: 1.6rem; 
     background-color: #2c3e50;
     text-align: center;
     margin: 0 0 1rem;
   }
  </style>
  <body>
    <section class="weather">
      <h2 class="weather__city js-weather-city"></h2>
      <section class="weather-temp js-weather-temp">
        <div class="weather-temp__main js-weather-temp-main"></div>
        <div class="weather-temp__max js-weather-temp-max"></div>
        <div class="weather-temp__min js-weather-temp-min"></div>
      </section>
      <section class="weather__sunrise js-weather-sunrise">Sunrise: </section>
      <section class="weather__sunset js-weather-sunset">Sunset: </section>
      <section class="weather__description js-weather-description"></section>
      <div class="weather__gif js-gif"></div>
    </section>
    <section class="loading">
      loading...
    </section>
  </body>
  <script>
    const onSuccess = data => {
      loadDataOnScreen(data);
      console.log(data);
    },
    onFailure = error => {
      console.log(error);
    },
    loadDataOnScreen = data => {
      const
        city = document.querySelector('.js-weather-city'),
        mainTemp = document.querySelector('.js-weather-temp-main'),
        maxTemp = document.querySelector('.js-weather-temp-max'),
        minTemp = document.querySelector('.js-weather-temp-min'),
        sunrise = document.querySelector('.js-weather-sunrise'),
        sunset = document.querySelector('.js-weather-sunset'),
        description = document.querySelector('.js-weather-description');
        
      city.textContent = `${data.name}, ${data.sys.country}`;
      mainTemp.textContent = `${data.main.temp}°C`;
      maxTemp.textContent = `Max: ${data.main.temp_max}°C`;
      minTemp.textContent = `Min: ${data.main.temp_min}°C`;
      sunrise.textContent = `Sunrise: ${getTimeFromTimestamp(data.sys.sunrise)}`;
      sunset.textContent = `Sunset: ${getTimeFromTimestamp(data.sys.sunset)}`;
      description.textContent = data.weather[0].description;
      show();
      loadGif(data.weather[0].description);
    },
    show = () => window.requestAnimationFrame(() => {
      document.querySelector('.weather').classList.add('weather--loaded');
      document.querySelector('.loading').remove();
    }),
    loadGif = description => {
      const giphy = {
		baseURL: "https://api.giphy.com/v1/gifs/",
		key: "dc6zaTOxFJmzC",
		tag: "fail",
		type: "search",
		rating: "pg-13",
        query: `weather ${description}`
	  };
      let giphyURL = encodeURI(
		giphy.baseURL +
          giphy.type +
		  "?api_key=" +
		  giphy.key +
		  "&tag=" +
		  giphy.tag +
		  "&rating=" +
		  giphy.rating +
		  "&q=" +
          giphy.query
	    );
        console.log(giphyURL);
        fetch(giphyURL)
          .then(response => response.json())
          .then(json => {
          console.log(json.data.length)
            let gifDiv = document.querySelector('.js-gif');
            gifDiv.style.backgroundImage = `url(${json.data[getRandomInt(0, json.data.length -1)].images.fixed_height.url})`;
            gifDiv.style.backgroundSize = 'contain';
            gifDiv.style.backgroundRepeat = 'no-repeat';
            gifDiv.style.margin = '0 auto';
            gifDiv.style.width = '200px';
            gifDiv.style.height = '200px';
          });
    },
    getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min,
    getTimeFromTimestamp = timestamp => {
      let date = new Date(timestamp*1000);
      return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;
    };
    
    google.script.run
    .withSuccessHandler(onSuccess)
    .withFailureHandler(onFailure)
    .getWeatherData();
  </script>
</html>


